package com.github.joomcode.mongoplanchecker.core;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.bson.Document;
import org.junit.jupiter.api.Test;

class PlanCheckerTest {
  private final PlanChecker checker = new PlanChecker();

  private static final String IDHACK =
      "{\"queryPlanner\": {\"plannerVersion\": 1, \"namespace\": \"test.testCollection\", \"indexFilterSet\": false, \"parsedQuery\": {\"_id\": {\"$eq\": \"foo\"}}, \"queryHash\": \"A300CFDE\", \"planCacheKey\": \"A2B33459\", \"winningPlan\": {\"stage\": \"IDHACK\"}, \"rejectedPlans\": []}, \"executionStats\": {\"executionSuccess\": true, \"nReturned\": 0, \"executionTimeMillis\": 0, \"totalKeysExamined\": 0, \"totalDocsExamined\": 0, \"executionStages\": {\"stage\": \"IDHACK\", \"nReturned\": 0, \"executionTimeMillisEstimate\": 0, \"works\": 1, \"advanced\": 0, \"needTime\": 0, \"needYield\": 0, \"saveState\": 0, \"restoreState\": 0, \"isEOF\": 1, \"keysExamined\": 0, \"docsExamined\": 0}, \"allPlansExecution\": []}, \"serverInfo\": {\"host\": \"f2f3a0c77a2e\", \"port\": 27017, \"version\": \"4.1.13\", \"gitVersion\": \"441714bc4c70699950f3ac51a5cac41dcd413eaa\"}, \"ok\": 1.0}";

  @Test
  void testIdHack() {
    assertEquals(new Violations(false, false, 0, 0), checker.getViolations(Document.parse(IDHACK)));
  }

  private static final String COLLSCAN_LIMIT1 =
      "{\"queryPlanner\": {\"plannerVersion\": 1, \"namespace\": \"test.testCollection\", \"indexFilterSet\": false, \"parsedQuery\": {\"name\": {\"$eq\": \"foo\"}}, \"queryHash\": \"01AEE5EC\", \"planCacheKey\": \"01AEE5EC\", \"winningPlan\": {\"stage\": \"LIMIT\", \"limitAmount\": 1, \"inputStage\": {\"stage\": \"COLLSCAN\", \"filter\": {\"name\": {\"$eq\": \"foo\"}}, \"direction\": \"forward\"}}, \"rejectedPlans\": []}, \"executionStats\": {\"executionSuccess\": true, \"nReturned\": 1, \"executionTimeMillis\": 0, \"totalKeysExamined\": 0, \"totalDocsExamined\": 1, \"executionStages\": {\"stage\": \"LIMIT\", \"nReturned\": 1, \"executionTimeMillisEstimate\": 0, \"works\": 3, \"advanced\": 1, \"needTime\": 1, \"needYield\": 0, \"saveState\": 0, \"restoreState\": 0, \"isEOF\": 1, \"limitAmount\": 1, \"inputStage\": {\"stage\": \"COLLSCAN\", \"filter\": {\"name\": {\"$eq\": \"foo\"}}, \"nReturned\": 1, \"executionTimeMillisEstimate\": 0, \"works\": 2, \"advanced\": 1, \"needTime\": 1, \"needYield\": 0, \"saveState\": 0, \"restoreState\": 0, \"isEOF\": 0, \"direction\": \"forward\", \"docsExamined\": 1}}, \"allPlansExecution\": []}, \"serverInfo\": {\"host\": \"2079aab1fc28\", \"port\": 27017, \"version\": \"4.1.13\", \"gitVersion\": \"441714bc4c70699950f3ac51a5cac41dcd413eaa\"}, \"ok\": 1.0}";

  @Test
  void testCollScanLimit1() {
    assertEquals(
        new Violations(false, false, 1, 0), checker.getViolations(Document.parse(COLLSCAN_LIMIT1)));
  }

  private static final String COLLSCAN =
      "{\"queryPlanner\": {\"plannerVersion\": 1, \"namespace\": \"test.testCollection\", \"indexFilterSet\": false, \"parsedQuery\": {\"name\": {\"$eq\": \"foo\"}}, \"queryHash\": \"01AEE5EC\", \"planCacheKey\": \"01AEE5EC\", \"winningPlan\": {\"stage\": \"COLLSCAN\", \"filter\": {\"name\": {\"$eq\": \"foo\"}}, \"direction\": \"forward\"}, \"rejectedPlans\": []}, \"executionStats\": {\"executionSuccess\": true, \"nReturned\": 1, \"executionTimeMillis\": 0, \"totalKeysExamined\": 0, \"totalDocsExamined\": 1, \"executionStages\": {\"stage\": \"COLLSCAN\", \"filter\": {\"name\": {\"$eq\": \"foo\"}}, \"nReturned\": 1, \"executionTimeMillisEstimate\": 0, \"works\": 3, \"advanced\": 1, \"needTime\": 1, \"needYield\": 0, \"saveState\": 0, \"restoreState\": 0, \"isEOF\": 1, \"direction\": \"forward\", \"docsExamined\": 1}, \"allPlansExecution\": []}, \"serverInfo\": {\"host\": \"0dc4872ec759\", \"port\": 27017, \"version\": \"4.1.13\", \"gitVersion\": \"441714bc4c70699950f3ac51a5cac41dcd413eaa\"}, \"ok\": 1.0}";

  @Test
  void testCollScan() {
    assertEquals(
        new Violations(false, false, 1, 0), checker.getViolations(Document.parse(COLLSCAN)));
  }

  private static final String COLLSCAN_SORT =
      "{\"queryPlanner\": {\"plannerVersion\": 1, \"namespace\": \"test.testCollection\", \"indexFilterSet\": false, \"parsedQuery\": {\"foo\": {\"$eq\": \"foo\"}}, \"queryHash\": \"0C003855\", \"planCacheKey\": \"0C003855\", \"winningPlan\": {\"stage\": \"SORT\", \"sortPattern\": {\"bar\": 1}, \"limitAmount\": 1, \"inputStage\": {\"stage\": \"SORT_KEY_GENERATOR\", \"inputStage\": {\"stage\": \"COLLSCAN\", \"filter\": {\"foo\": {\"$eq\": \"foo\"}}, \"direction\": \"forward\"}}}, \"rejectedPlans\": []}, \"executionStats\": {\"executionSuccess\": true, \"nReturned\": 0, \"executionTimeMillis\": 0, \"totalKeysExamined\": 0, \"totalDocsExamined\": 1, \"executionStages\": {\"stage\": \"SORT\", \"nReturned\": 0, \"executionTimeMillisEstimate\": 0, \"works\": 5, \"advanced\": 0, \"needTime\": 4, \"needYield\": 0, \"saveState\": 0, \"restoreState\": 0, \"isEOF\": 1, \"sortPattern\": {\"bar\": 1}, \"memUsage\": 0, \"memLimit\": 33554432, \"limitAmount\": 1, \"inputStage\": {\"stage\": \"SORT_KEY_GENERATOR\", \"nReturned\": 0, \"executionTimeMillisEstimate\": 0, \"works\": 4, \"advanced\": 0, \"needTime\": 3, \"needYield\": 0, \"saveState\": 0, \"restoreState\": 0, \"isEOF\": 1, \"inputStage\": {\"stage\": \"COLLSCAN\", \"filter\": {\"foo\": {\"$eq\": \"foo\"}}, \"nReturned\": 0, \"executionTimeMillisEstimate\": 0, \"works\": 3, \"advanced\": 0, \"needTime\": 2, \"needYield\": 0, \"saveState\": 0, \"restoreState\": 0, \"isEOF\": 1, \"direction\": \"forward\", \"docsExamined\": 1}}}, \"allPlansExecution\": []}, \"serverInfo\": {\"host\": \"2dc415629728\", \"port\": 27017, \"version\": \"4.1.13\", \"gitVersion\": \"441714bc4c70699950f3ac51a5cac41dcd413eaa\"}, \"ok\": 1.0}";

  @Test
  void testCollScanSort() {
    assertEquals(
        new Violations(false, false, 1, 1), checker.getViolations(Document.parse(COLLSCAN_SORT)));
  }

  private static final String IXSCAN_SORT =
      "{\"queryPlanner\": {\"plannerVersion\": 1, \"namespace\": \"test.testCollection\", \"indexFilterSet\": false, \"parsedQuery\": {\"_id\": {\"$in\": [\"bar\", \"foo\"]}}, \"queryHash\": \"E7055819\", \"planCacheKey\": \"49D0A81D\", \"winningPlan\": {\"stage\": \"SORT\", \"sortPattern\": {\"bar\": 1}, \"limitAmount\": 1, \"inputStage\": {\"stage\": \"SORT_KEY_GENERATOR\", \"inputStage\": {\"stage\": \"FETCH\", \"inputStage\": {\"stage\": \"IXSCAN\", \"keyPattern\": {\"_id\": 1}, \"indexName\": \"_id_\", \"isMultiKey\": false, \"multiKeyPaths\": {\"_id\": []}, \"isUnique\": true, \"isSparse\": false, \"isPartial\": false, \"indexVersion\": 2, \"direction\": \"forward\", \"indexBounds\": {\"_id\": [\"[\\\"bar\\\", \\\"bar\\\"]\", \"[\\\"foo\\\", \\\"foo\\\"]\"]}}}}}, \"rejectedPlans\": []}, \"executionStats\": {\"executionSuccess\": true, \"nReturned\": 0, \"executionTimeMillis\": 0, \"totalKeysExamined\": 1, \"totalDocsExamined\": 0, \"executionStages\": {\"stage\": \"SORT\", \"nReturned\": 0, \"executionTimeMillisEstimate\": 0, \"works\": 3, \"advanced\": 0, \"needTime\": 2, \"needYield\": 0, \"saveState\": 0, \"restoreState\": 0, \"isEOF\": 1, \"sortPattern\": {\"bar\": 1}, \"memUsage\": 0, \"memLimit\": 33554432, \"limitAmount\": 1, \"inputStage\": {\"stage\": \"SORT_KEY_GENERATOR\", \"nReturned\": 0, \"executionTimeMillisEstimate\": 0, \"works\": 2, \"advanced\": 0, \"needTime\": 1, \"needYield\": 0, \"saveState\": 0, \"restoreState\": 0, \"isEOF\": 1, \"inputStage\": {\"stage\": \"FETCH\", \"nReturned\": 0, \"executionTimeMillisEstimate\": 0, \"works\": 1, \"advanced\": 0, \"needTime\": 0, \"needYield\": 0, \"saveState\": 0, \"restoreState\": 0, \"isEOF\": 1, \"docsExamined\": 0, \"alreadyHasObj\": 0, \"inputStage\": {\"stage\": \"IXSCAN\", \"nReturned\": 0, \"executionTimeMillisEstimate\": 0, \"works\": 1, \"advanced\": 0, \"needTime\": 0, \"needYield\": 0, \"saveState\": 0, \"restoreState\": 0, \"isEOF\": 1, \"keyPattern\": {\"_id\": 1}, \"indexName\": \"_id_\", \"isMultiKey\": false, \"multiKeyPaths\": {\"_id\": []}, \"isUnique\": true, \"isSparse\": false, \"isPartial\": false, \"indexVersion\": 2, \"direction\": \"forward\", \"indexBounds\": {\"_id\": [\"[\\\"bar\\\", \\\"bar\\\"]\", \"[\\\"foo\\\", \\\"foo\\\"]\"]}, \"keysExamined\": 1, \"seeks\": 1, \"dupsTested\": 0, \"dupsDropped\": 0}}}}, \"allPlansExecution\": []}, \"serverInfo\": {\"host\": \"f45c8985e1bd\", \"port\": 27017, \"version\": \"4.1.13\", \"gitVersion\": \"441714bc4c70699950f3ac51a5cac41dcd413eaa\"}, \"ok\": 1.0}";

  @Test
  void testIxScanSort() {
    assertEquals(
        new Violations(false, false, 0, 1), checker.getViolations(Document.parse(IXSCAN_SORT)));
  }

  private static final String EXCESSREAD =
      "{\"queryPlanner\": {\"plannerVersion\": 1, \"namespace\": \"test.testCollection\", \"indexFilterSet\": false, \"parsedQuery\": {\"$and\": [{\"id\": {\"$eq\": 333}}, {\"id100\": {\"$eq\": 3}}]}, \"queryHash\": \"5FF2D19E\", \"planCacheKey\": \"1852722E\", \"winningPlan\": {\"stage\": \"LIMIT\", \"limitAmount\": 1, \"inputStage\": {\"stage\": \"FETCH\", \"filter\": {\"id\": {\"$eq\": 333}}, \"inputStage\": {\"stage\": \"IXSCAN\", \"keyPattern\": {\"id100\": 1}, \"indexName\": \"id100_1\", \"isMultiKey\": false, \"multiKeyPaths\": {\"id100\": []}, \"isUnique\": false, \"isSparse\": false, \"isPartial\": false, \"indexVersion\": 2, \"direction\": \"forward\", \"indexBounds\": {\"id100\": [\"[3, 3]\"]}}}}, \"rejectedPlans\": []}, \"executionStats\": {\"executionSuccess\": true, \"nReturned\": 1, \"executionTimeMillis\": 0, \"totalKeysExamined\": 34, \"totalDocsExamined\": 34, \"executionStages\": {\"stage\": \"LIMIT\", \"nReturned\": 1, \"executionTimeMillisEstimate\": 0, \"works\": 35, \"advanced\": 1, \"needTime\": 33, \"needYield\": 0, \"saveState\": 0, \"restoreState\": 0, \"isEOF\": 1, \"limitAmount\": 1, \"inputStage\": {\"stage\": \"FETCH\", \"filter\": {\"id\": {\"$eq\": 333}}, \"nReturned\": 1, \"executionTimeMillisEstimate\": 0, \"works\": 34, \"advanced\": 1, \"needTime\": 33, \"needYield\": 0, \"saveState\": 0, \"restoreState\": 0, \"isEOF\": 0, \"docsExamined\": 34, \"alreadyHasObj\": 0, \"inputStage\": {\"stage\": \"IXSCAN\", \"nReturned\": 34, \"executionTimeMillisEstimate\": 0, \"works\": 34, \"advanced\": 34, \"needTime\": 0, \"needYield\": 0, \"saveState\": 0, \"restoreState\": 0, \"isEOF\": 0, \"keyPattern\": {\"id100\": 1}, \"indexName\": \"id100_1\", \"isMultiKey\": false, \"multiKeyPaths\": {\"id100\": []}, \"isUnique\": false, \"isSparse\": false, \"isPartial\": false, \"indexVersion\": 2, \"direction\": \"forward\", \"indexBounds\": {\"id100\": [\"[3, 3]\"]}, \"keysExamined\": 34, \"seeks\": 1, \"dupsTested\": 0, \"dupsDropped\": 0}}}, \"allPlansExecution\": []}, \"serverInfo\": {\"host\": \"b921c6f53353\", \"port\": 27017, \"version\": \"4.1.13\", \"gitVersion\": \"441714bc4c70699950f3ac51a5cac41dcd413eaa\"}, \"ok\": 1.0, \"$clusterTime\": {\"clusterTime\": {\"$timestamp\": {\"t\": 1560253229, \"i\": 1005}}, \"signature\": {\"hash\": {\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\", \"$type\": \"00\"}, \"keyId\": {\"$numberLong\": \"0\"}}}, \"operationTime\": {\"$timestamp\": {\"t\": 1560253229, \"i\": 1005}}}";

  @Test
  void testExcessRead() {
    assertEquals(
        new Violations(false, true, 0, 0), checker.getViolations(Document.parse(EXCESSREAD)));
  }

  private static final String BROADCAST_EXCESSREAD_COLLSCAN =
      "{\"queryPlanner\": {\"mongosPlannerVersion\": 1, \"winningPlan\": {\"stage\": \"SHARD_MERGE\", \"shards\": [{\"shardName\": \"rs1\", \"connectionString\": \"rs1/127.0.0.1:28101\", \"serverInfo\": {\"host\": \"3db309b0cac8\", \"port\": 28101, \"version\": \"4.0.9\", \"gitVersion\": \"fc525e2d9b0e4bceff5c2201457e564362909765\"}, \"plannerVersion\": 1, \"namespace\": \"test.testCollection\", \"indexFilterSet\": false, \"parsedQuery\": {\"foo\": {\"$eq\": \"bar\"}}, \"winningPlan\": {\"stage\": \"LIMIT\", \"limitAmount\": 1, \"inputStage\": {\"stage\": \"SHARDING_FILTER\", \"inputStage\": {\"stage\": \"COLLSCAN\", \"filter\": {\"foo\": {\"$eq\": \"bar\"}}, \"direction\": \"forward\"}}}, \"rejectedPlans\": []}, {\"shardName\": \"rs0\", \"connectionString\": \"rs0/127.0.0.1:28100\", \"serverInfo\": {\"host\": \"3db309b0cac8\", \"port\": 28100, \"version\": \"4.0.9\", \"gitVersion\": \"fc525e2d9b0e4bceff5c2201457e564362909765\"}, \"plannerVersion\": 1, \"namespace\": \"test.testCollection\", \"indexFilterSet\": false, \"parsedQuery\": {\"foo\": {\"$eq\": \"bar\"}}, \"winningPlan\": {\"stage\": \"LIMIT\", \"limitAmount\": 1, \"inputStage\": {\"stage\": \"SHARDING_FILTER\", \"inputStage\": {\"stage\": \"COLLSCAN\", \"filter\": {\"foo\": {\"$eq\": \"bar\"}}, \"direction\": \"forward\"}}}, \"rejectedPlans\": []}]}}, \"executionStats\": {\"nReturned\": 0, \"executionTimeMillis\": 42, \"totalKeysExamined\": 0, \"totalDocsExamined\": 100000, \"executionStages\": {\"stage\": \"SHARD_MERGE\", \"nReturned\": 0, \"executionTimeMillis\": 42, \"totalKeysExamined\": 0, \"totalDocsExamined\": 100000, \"totalChildMillis\": {\"$numberLong\": \"78\"}, \"shards\": [{\"shardName\": \"rs1\", \"executionSuccess\": true, \"executionStages\": {\"stage\": \"LIMIT\", \"nReturned\": 0, \"executionTimeMillisEstimate\": 30, \"works\": 50046, \"advanced\": 0, \"needTime\": 50045, \"needYield\": 0, \"saveState\": 390, \"restoreState\": 390, \"isEOF\": 1, \"invalidates\": 0, \"limitAmount\": 1, \"inputStage\": {\"stage\": \"SHARDING_FILTER\", \"nReturned\": 0, \"executionTimeMillisEstimate\": 30, \"works\": 50046, \"advanced\": 0, \"needTime\": 50045, \"needYield\": 0, \"saveState\": 390, \"restoreState\": 390, \"isEOF\": 1, \"invalidates\": 0, \"chunkSkips\": 0, \"inputStage\": {\"stage\": \"COLLSCAN\", \"filter\": {\"foo\": {\"$eq\": \"bar\"}}, \"nReturned\": 0, \"executionTimeMillisEstimate\": 30, \"works\": 50046, \"advanced\": 0, \"needTime\": 50045, \"needYield\": 0, \"saveState\": 390, \"restoreState\": 390, \"isEOF\": 1, \"invalidates\": 0, \"direction\": \"forward\", \"docsExamined\": 50044}}}}, {\"shardName\": \"rs0\", \"executionSuccess\": true, \"executionStages\": {\"stage\": \"LIMIT\", \"nReturned\": 0, \"executionTimeMillisEstimate\": 40, \"works\": 49958, \"advanced\": 0, \"needTime\": 49957, \"needYield\": 0, \"saveState\": 390, \"restoreState\": 390, \"isEOF\": 1, \"invalidates\": 0, \"limitAmount\": 1, \"inputStage\": {\"stage\": \"SHARDING_FILTER\", \"nReturned\": 0, \"executionTimeMillisEstimate\": 40, \"works\": 49958, \"advanced\": 0, \"needTime\": 49957, \"needYield\": 0, \"saveState\": 390, \"restoreState\": 390, \"isEOF\": 1, \"invalidates\": 0, \"chunkSkips\": 0, \"inputStage\": {\"stage\": \"COLLSCAN\", \"filter\": {\"foo\": {\"$eq\": \"bar\"}}, \"nReturned\": 0, \"executionTimeMillisEstimate\": 40, \"works\": 49958, \"advanced\": 0, \"needTime\": 49957, \"needYield\": 0, \"saveState\": 390, \"restoreState\": 390, \"isEOF\": 1, \"invalidates\": 0, \"direction\": \"forward\", \"docsExamined\": 49956}}}}]}, \"allPlansExecution\": [{\"shardName\": \"rs1\", \"allPlans\": []}, {\"shardName\": \"rs0\", \"allPlans\": []}]}, \"ok\": 1.0, \"operationTime\": {\"$timestamp\": {\"t\": 1560106910, \"i\": 1}}, \"$clusterTime\": {\"clusterTime\": {\"$timestamp\": {\"t\": 1560106910, \"i\": 1}}, \"signature\": {\"hash\": {\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\", \"$type\": \"00\"}, \"keyId\": {\"$numberLong\": \"0\"}}}}";

  @Test
  void testBroadcastExcessReadCollScan() {
    assertEquals(
        new Violations(true, true, 1, 0),
        checker.getViolations(Document.parse(BROADCAST_EXCESSREAD_COLLSCAN)));
  }
}
